datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String           @unique
  password      String
  emailVerified DateTime?
  image         String?          @default("https://upload.wikimedia.org/wikipedia/commons/thumb/2/2c/Default_pfp.svg/2048px-Default_pfp.svg.png")

  collections   Collection[]
  
  // Explicitly defining the many-to-many relationship via the join model ClassUser
  classUsers    ClassUser[]

  createdClasses Classes[]       @relation("UserCreatedClasses")

  messages      Message[] 

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]


  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}
// Made to keep all the flashcard data in one place. For example one collection can keep data for multiple flashcards. One collection can have as many flashcards as you want. The collection has to have a relation with the user.
model Collection {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?

  likes String[] @default([])
  seen String[] @default([])

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  flashcards Flashcard[]

  sharedCollections SharedCollection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flashcard {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  question String
  answer String
  hint String?

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Each class will have a creator which will be the user who created the class. The class can have many users who are enrolled in the class. 

// This because mongodb doesn't support many-to-many relationships
model SharedCollection {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  classId       String     @db.ObjectId
  collectionId  String     @db.ObjectId

  class         Classes    @relation(fields: [classId], references: [id], onDelete: Cascade)
  collection    Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  createdAt     DateTime   @default(now())

  @@unique([classId, collectionId]) 
}

model Classes {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?

  creatorId     String           @db.ObjectId
  creator       User             @relation("UserCreatedClasses", fields: [creatorId], references: [id])

  // Explicitly defining the many-to-many relationship via the join model ClassUser
  classUsers    ClassUser[]

  conversations Conversation?

  sharedCollections SharedCollection[]

  lastMessageAt DateTime         @default(now())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model ClassUser {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  classId    String   @db.ObjectId
  userId     String   @db.ObjectId

  class      Classes  @relation(fields: [classId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([classId, userId])  // Ensures that each user can join a class only once
}
// To be done
model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  class Classes @relation(fields: [classId], references: [id])
  classId String @db.ObjectId @unique

  messages Message[]
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  createdAt DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String @db.ObjectId

  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String @db.ObjectId
}

 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String           @unique
  password      String
  emailVerified DateTime?       
  image         String?          @default("https://upload.wikimedia.org/wikipedia/commons/thumb/2/2c/Default_pfp.svg/2048px-Default_pfp.svg.png")

  collections   Collection[]
  

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]


  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Collection {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  // likes String[] @default([])
  // seen String[] @default([])

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  flashcards Flashcard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flashcard {
 id          String   @id @default(auto()) @map("_id") @db.ObjectId
  question    String
  image       String? // Stores the image URL
  options     String[] // Array to store options A, B, C, D
  answer      String   // Stores the correct answer (can match one of the options)

  collection  Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String   @db.ObjectId

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}